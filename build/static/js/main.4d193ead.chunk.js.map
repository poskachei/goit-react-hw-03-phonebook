{"version":3,"sources":["components/Forma.js","components/List.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","this","className","onSubmit","htmlFor","id","type","onChange","Component","ContactList","contacts","onRemove","map","key","onClick","Filter","onChangeFilter","App","filter","addContact","contact","uuidv4","prevState","removeContact","contactId","changeFilter","getVisibleContacts","toLowerCase","includes","persistedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","visibleContacts","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d193ead.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onAddContact(this.state);\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form className=\"contact-form\" onSubmit={this.handleSubmit}>\r\n        <label htmlFor=\"name\"> Name </label>\r\n        <input\r\n          value={name}\r\n          name=\"name\"\r\n          id=\"name\"\r\n          type=\"text\"\r\n          onChange={this.handleChange}\r\n        />\r\n        <label htmlFor=\"number\"> Number </label>\r\n        <input\r\n          value={number}\r\n          name=\"number\"\r\n          id=\"number\"\r\n          type=\"text\"\r\n          onChange={this.handleChange}\r\n        />\r\n        <button type=\"submit\"> Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst ContactList = ({ contacts, onRemove }) => {\r\n  return (\r\n    <ul className=\"contacts-list\">\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className=\"contacts-item\">\r\n          <span className=\"contact-name\">\r\n            {\" \"}\r\n            {name} : {number}{\" \"}\r\n          </span>\r\n\r\n          <button onClick={() => onRemove(id)}>Delet</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\n\r\nconst Filter = ({ value, onChangeFilter }) => {\r\n  return (\r\n    <div className=\"filter-container\">\r\n      <label htmlFor=\"filter\">Find contacts by name</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"filter\"\r\n        value={value}\r\n        onChange={(e) => onChangeFilter(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from \"react\";\nimport ContactForm from \"./components/Forma\";\nimport ContactList from \"./components/List\";\nimport Filter from \"./components/Filter\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const persistedContacts = localStorage.getItem(\"contacts\");\n\n    if (persistedContacts) {\n      this.setState({ contacts: JSON.parse(persistedContacts) });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  //добавляем новый контакт, имя и номер возьмем из state ContactForm, id генерим тут\n  addContact = ({ name, number }) => {\n    const contact = {\n      id: uuidv4(),\n      name: name,\n      number: number,\n    };\n    //распыляем старый массив и добавляем к нему новый контакт\n    this.setState((prevState) => {\n      return { contacts: [...prevState.contacts, contact] };\n    });\n  };\n\n  removeContact = (contactId) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };\n\n  changeFilter = (filter) => {\n    this.setState({ filter });\n  };\n  np;\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div className=\"pnohebook-container\">\n        <h1>Phonebook</h1>\n        <ContactForm onAddContact={this.addContact} />\n\n        <h2>Contacts</h2>\n        {contacts.length > 1 && (\n          <Filter onChangeFilter={this.changeFilter} value={filter} />\n        )}\n        {visibleContacts.length > 0 && (\n          <ContactList\n            contacts={visibleContacts}\n            onRemove={this.removeContact}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}