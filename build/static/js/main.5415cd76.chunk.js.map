{"version":3,"sources":["components/Forma.js","components/List.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","state","name","number","handleChangeText","e","setState","target","value","handleChangeNumber","handleSubmit","preventDefault","props","onAddContact","this","className","onSubmit","htmlFor","required","id","type","onChange","Component","ContactList","contacts","onRemove","map","key","onClick","Filter","onChangeFilter","App","filter","addContact","contact","uuidv4","prevState","removeContact","contactId","changeFilter","getVisibleContacts","toLowerCase","includes","persistedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","visibleContacts","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5415cd76.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChangeText = (e) => {\r\n    this.setState({\r\n      name: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleChangeNumber = (e) => {\r\n    this.setState({\r\n      number: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onAddContact(this.state);\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form className=\"contact-form\" onSubmit={this.handleSubmit}>\r\n        <label htmlFor=\"name\"> Name </label>\r\n        <input\r\n          required=\"name\"\r\n          value={name}\r\n          name=\"name\"\r\n          id=\"name\"\r\n          type=\"text\"\r\n          onChange={this.handleChangeText}\r\n        />\r\n        <label htmlFor=\"number\"> Number </label>\r\n        <input\r\n          required=\"number\"\r\n          value={number}\r\n          name=\"number\"\r\n          id=\"number\"\r\n          type=\"text\"\r\n          onChange={this.handleChangeNumber}\r\n        />\r\n        <button type=\"submit\"> Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst ContactList = ({ contacts, onRemove }) => {\r\n  return (\r\n    <ul className=\"contacts-list\">\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className=\"contacts-item\">\r\n          <span className=\"contact-name\">\r\n            {\" \"}\r\n            {name} : {number}{\" \"}\r\n          </span>\r\n\r\n          <button onClick={() => onRemove(id)}>Delet</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\n\r\nconst Filter = ({ value, onChangeFilter }) => {\r\n  return (\r\n    <div className=\"filter-container\">\r\n      <label htmlFor=\"filter\">Find contacts by name</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"filter\"\r\n        value={value}\r\n        onChange={(e) => onChangeFilter(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from \"react\";\r\nimport ContactForm from \"./components/Forma\";\r\nimport ContactList from \"./components/List\";\r\nimport Filter from \"./components/Filter\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport \"./App.css\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    const persistedContacts = localStorage.getItem(\"contacts\");\r\n\r\n    if (persistedContacts) {\r\n      this.setState({ contacts: JSON.parse(persistedContacts) });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.contacts !== this.state.contacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n  //добавляем новый контакт, имя и номер возьмем из state ContactForm, id генерим тут\r\n  addContact = ({ name, number }) => {\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name: name,\r\n      number: number,\r\n    };\r\n    //распыляем старый массив и добавляем к нему новый контакт\r\n    this.setState((prevState) => {\r\n      return { contacts: [...prevState.contacts, contact] };\r\n    });\r\n  };\r\n\r\n  removeContact = (contactId) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\r\n      };\r\n    });\r\n  };\r\n\r\n  changeFilter = (filter) => {\r\n    this.setState({ filter });\r\n  };\r\n\r\n  getVisibleContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { contacts, filter } = this.state;\r\n    const visibleContacts = this.getVisibleContacts();\r\n\r\n    return (\r\n      <div className=\"pnohebook-container\">\r\n        <h1>Phonebook</h1>\r\n        <ContactForm onAddContact={this.addContact} />\r\n\r\n        <h2>Contacts</h2>\r\n        {contacts.length > 1 && (\r\n          <Filter onChangeFilter={this.changeFilter} value={filter} />\r\n        )}\r\n        {visibleContacts.length > 0 && (\r\n          <ContactList\r\n            contacts={visibleContacts}\r\n            onRemove={this.removeContact}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}